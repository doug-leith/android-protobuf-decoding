%/**
%   * The compact format packs everything in a String object and a Object[] array. The String object
%   * is encoded with field number, field type, hasbits offset, oneof index, etc., whereas the
%   * Object[] array contains field references, class references, instance references, etc.
%   *
%   * <p>The String object encodes a sequence of integers into UTF-16 characters. For each int, it
%   * will be encoding into 1 to 3 UTF-16 characters depending on its unsigned value:
%   *
%   * <ul>
%   *   <li>1 char: [c1: 0x0000 - 0xD7FF] = int of the same value.
%   *   <li>2 chars: [c1: 0xE000 - 0xFFFF], [c2: 0x0000 - 0xD7FF] = (c2 << 13) | (c1 & 0x1FFF)
%   *   <li>3 chars: [c1: 0xE000 - 0xFFFF], [c2: 0xE000 - 0xFFFF], [c3: 0x0000 - 0xD7FF] = (c3 << 26)
%   *       | ((c2 & 0x1FFF) << 13) | (c1 & 0x1FFF)
%   * </ul>
%   *
%   * <p>Note that we don't use UTF-16 surrogate pairs [0xD800 - 0xDFFF] because they have to come in
%   * pairs to form a valid UTF-16char sequence and don't help us encode values more efficiently.
%   *
%   * <p>The integer sequence encoded in the String object has the following layout:
%   *
%   * <ul>
%   *   <li>[0]: flags, flags & 0x1 = is proto2?, flags & 0x2 = is message?.
%   *   <li>[1]: field count, if 0, this is the end of the integer sequence and the corresponding
%   *       Object[] array should be null.
%   *   <li>[2]: oneof count
%   *   <li>[3]: hasbits count, how many hasbits integers are generated.
%   *   <li>[4]: min field number
%   *   <li>[5]: max field number
%   *   <li>[6]: total number of entries need to allocate
%   *   <li>[7]: map field count
%   *   <li>[8]: repeated field count, this doesn't include map fields.
%   *   <li>[9]: size of checkInitialized array
%   *   <li>[...]: field entries
%   * </ul>
%   *
%   * <p>Each field entry starts with a field number and the field type:
%   *
%   * <ul>
%   *   <li>[0]: field number
%   *   <li>[1]: field type with extra bits:
%   *       <ul>
%   *         <li>v & 0xFF = field type as defined in the FieldType class
%   *         <li>v & 0x100 = is required?
%   *         <li>v & 0x200 = is checkUtf8?
%   *         <li>v & 0x400 = needs isInitialized check?
%   *         <li>v & 0x800 = is map field with proto2 enum value?
%   *       </ul>
%   * </ul>
%   *
%   * If the file is proto2 and this is a singular field:
%   *
%   * <ul>
%   *   <li>[2]: hasbits offset
%   * </ul>
%   *
%   * If the field is in an oneof:
%   *
%   * <ul>
%   *   <li>[2]: oneof index
%   * </ul>
%   *
%   * For other types, the field entry only has field number and field type.
%   *
%   * <p>The Object[] array has 3 sections:
%   *
%   * <ul>
%   *   <li>---- oneof section ----
%   *       <ul>
%   *         <li>[0]: value field for oneof 1.
%   *         <li>[1]: case field for oneof 1.
%   *         <li>...
%   *         <li>[.]: value field for oneof n.
%   *         <li>[.]: case field for oneof n.
%   *       </ul>
%   *   <li>---- hasbits section ----
%   *       <ul>
%   *         <li>[.]: hasbits field 1
%   *         <li>[.]: hasbits field 2
%   *         <li>...
%   *         <li>[.]: hasbits field n
%   *       </ul>
%   *   <li>---- field section ----
%   *       <ul>
%   *         <li>[...]: field entries
%   *       </ul>
%   * </ul>
%   *
%   * <p>In the Object[] array, field entries are ordered in the same way as field entries in the
%   * String object. The size of each entry is determined by the field type.
%   *
%   * <ul>
%   *   <li>Oneof field:
%   *       <ul>
%   *         <li>Oneof message field:
%   *             <ul>
%   *               <li>[0]: message class reference.
%   *             </ul>
%   *         <li>Oneof enum fieldin proto2:
%   *             <ul>
%   *               <li>[0]: EnumLiteMap
%   *             </ul>
%   *         <li>For all other oneof fields, field entry in the Object[] array is empty.
%   *       </ul>
%   *   <li>Repeated message field:
%   *       <ul>
%   *         <li>[0]: field reference
%   *         <li>[1]: message class reference
%   *       </ul>
%   *   <li>Proto2 singular/repeated enum field:
%   *       <ul>
%   *         <li>[0]: field reference
%   *         <li>[1]: EnumLiteMap
%   *       </ul>
%   *   <li>Map field with a proto2 enum value:
%   *       <ul>
%   *         <li>[0]: field reference
%   *         <li>[1]: map default entry instance
%   *         <li>[2]: EnumLiteMap
%   *       </ul>
%   *   <li>Map field with other value types:
%   *       <ul>
%   *         <li>[0]: field reference
%   *         <li>[1]: map default entry instance
%   *       </ul>
%   *   <li>All other field type:
%   *       <ul>
%   *         <li>[0]: field reference
%   *       </ul>
%   * </ul>
%   *
%   * <p>In order to read the field info from this compact format, a reader needs to progress through
%   * the String object and the Object[] array simultaneously.
 
%      switch (fieldType) {
%        case 0: // DOUBLE:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeDoubleSize(number, 0);
%          }
%          break;
%        case 1: // FLOAT:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeFloatSize(number, 0);
%          }
%          break;
%        case 2: // INT64:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeInt64Size(number, unsafe.getLong(message, offset));
%          }
%          break;
%        case 3: // UINT64:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeUInt64Size(number, unsafe.getLong(message, offset));
%          }
%          break;
%        case 4: // INT32:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeInt32Size(number, unsafe.getInt(message, offset));
%          }
%          break;
%        case 5: // FIXED64:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeFixed64Size(number, 0);
%          }
%          break;
%        case 6: // FIXED32:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeFixed32Size(number, 0);
%          }
%          break;
%        case 7: // BOOL:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeBoolSize(number, true);
%          }
%          break;
%        case 8: // STRING:
%          if ((currentPresenceField & presenceMask) != 0) {
%            Object value = unsafe.getObject(message, offset);
%            if (value instanceof ByteString) {
%              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);
%            } else {
%              size += CodedOutputStream.computeStringSize(number, (String) value);
%            }
%          }
%          break;
%        case 9: // MESSAGE:
%          if ((currentPresenceField & presenceMask) != 0) {
%            Object value = unsafe.getObject(message, offset);
%            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));
%          }
%          break;
%        case 10: // BYTES:
%          if ((currentPresenceField & presenceMask) != 0) {
%            ByteString value = (ByteString) unsafe.getObject(message, offset);
%            size += CodedOutputStream.computeBytesSize(number, value);
%          }
%          break;
%        case 11: // UINT32:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeUInt32Size(number, unsafe.getInt(message, offset));
%          }
%          break;
%        case 12: // ENUM:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeEnumSize(number, unsafe.getInt(message, offset));
%          }
%          break;
%        case 13: // SFIXED32:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeSFixed32Size(number, 0);
%          }
%          break;
%        case 14: // SFIXED64:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeSFixed64Size(number, 0);
%          }
%          break;
%        case 15: // SINT32:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeSInt32Size(number, unsafe.getInt(message, offset));
%          }
%          break;
%        case 16: // SINT64:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size += CodedOutputStream.computeSInt64Size(number, unsafe.getLong(message, offset));
%          }
%          break;
%        case 17: // GROUP:
%          if ((currentPresenceField & presenceMask) != 0) {
%            size +=
%                CodedOutputStream.computeGroupSize(
%                    number,
%                    (MessageLite) unsafe.getObject(message, offset),
%                    getMessageFieldSchema(i));
%          }
%          break;
%        case 18: // DOUBLE_LIST:
%          size +=
%              SchemaUtil.computeSizeFixed64List(
%                  number, (List<?>) unsafe.getObject(message, offset), false);
%          break;
%        case 19: // FLOAT_LIST:
%          size +=
%              SchemaUtil.computeSizeFixed32List(
%                  number, (List<?>) unsafe.getObject(message, offset), false);
%          break;
%        case 20: // INT64_LIST:
%          size +=
%              SchemaUtil.computeSizeInt64List(
%                  number, (List<Long>) unsafe.getObject(message, offset), false);
%          break;
%        case 21: // UINT64_LIST:
%          size +=
%              SchemaUtil.computeSizeUInt64List(
%                  number, (List<Long>) unsafe.getObject(message, offset), false);
%          break;
%        case 22: // INT32_LIST:
%          size +=
%              SchemaUtil.computeSizeInt32List(
%                  number, (List<Integer>) unsafe.getObject(message, offset), false);
%          break;
%        case 23: // FIXED64_LIST:
%          size +=
%              SchemaUtil.computeSizeFixed64List(
%                  number, (List<?>) unsafe.getObject(message, offset), false);
%          break;
%        case 24: // FIXED32_LIST:
%          size +=
%              SchemaUtil.computeSizeFixed32List(
%                  number, (List<?>) unsafe.getObject(message, offset), false);
%          break;
%        case 25: // BOOL_LIST:
%          size +=
%              SchemaUtil.computeSizeBoolList(
%                  number, (List<?>) unsafe.getObject(message, offset), false);
%          break;
%        case 26: // STRING_LIST:
%          size +=
%              SchemaUtil.computeSizeStringList(number, (List<?>) unsafe.getObject(message, offset));
%          break;
%        case 27: // MESSAGE_LIST:
%          size +=
%              SchemaUtil.computeSizeMessageList(
%                  number, (List<?>) unsafe.getObject(message, offset), getMessageFieldSchema(i));
%          break;
%        case 28: // BYTES_LIST:
%          size +=
%              SchemaUtil.computeSizeByteStringList(
%                  number, (List<ByteString>) unsafe.getObject(message, offset));
%          break;
%        case 29: // UINT32_LIST:
%          size +=
%              SchemaUtil.computeSizeUInt32List(
%                  number, (List<Integer>) unsafe.getObject(message, offset), false);
%          break;
%        case 30: // ENUM_LIST:
%          size +=
%              SchemaUtil.computeSizeEnumList(
%                  number, (List<Integer>) unsafe.getObject(message, offset), false);
%          break;
%        case 31: // SFIXED32_LIST:
%          size +=
%              SchemaUtil.computeSizeFixed32List(
%                  number, (List<Integer>) unsafe.getObject(message, offset), false);
%          break;
%        case 32: // SFIXED64_LIST:
%          size +=
%              SchemaUtil.computeSizeFixed64List(
%                  number, (List<Long>) unsafe.getObject(message, offset), false);
%          break;
%        case 33: // SINT32_LIST:
%          size +=
%              SchemaUtil.computeSizeSInt32List(
%                  number, (List<Integer>) unsafe.getObject(message, offset), false);
%          break;
%        case 34: // SINT64_LIST:
%          size +=
%              SchemaUtil.computeSizeSInt64List(
%                  number, (List<Long>) unsafe.getObject(message, offset), false);
%          break;
%        case 35:
%          { // DOUBLE_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeFixed64ListNoTag(
%                    (List<Double>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 36:
%          { // FLOAT_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeFixed32ListNoTag(
%                    (List<Float>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 37:
%          { // INT64_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeInt64ListNoTag(
%                    (List<Long>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 38:
%          { // UINT64_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeUInt64ListNoTag(
%                    (List<Long>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 39:
%          { // INT32_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeInt32ListNoTag(
%                    (List<Integer>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 40:
%          { // FIXED64_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeFixed64ListNoTag(
%                    (List<Long>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 41:
%          { // FIXED32_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeFixed32ListNoTag(
%                    (List<Integer>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 42:
%          { // BOOL_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeBoolListNoTag(
%                    (List<Boolean>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 43:
%          { // UINT32_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeUInt32ListNoTag(
%                    (List<Integer>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 44:
%          { // ENUM_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeEnumListNoTag(
%                    (List<Integer>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 45:
%          { // SFIXED32_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeFixed32ListNoTag(
%                    (List<Integer>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 46:
%          { // SFIXED64_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeFixed64ListNoTag(
%                    (List<Long>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 47:
%          { // SINT32_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeSInt32ListNoTag(
%                    (List<Integer>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 48:
%          { // SINT64_LIST_PACKED:
%            int fieldSize =
%                SchemaUtil.computeSizeSInt64ListNoTag(
%                    (List<Long>) unsafe.getObject(message, offset));
%            if (fieldSize > 0) {
%              if (useCachedSizeField) {
%                unsafe.putInt(message, (long) presenceMaskAndOffset, fieldSize);
%              }
%              size +=
%                  CodedOutputStream.computeTagSize(number)
%                      + CodedOutputStream.computeUInt32SizeNoTag(fieldSize)
%                      + fieldSize;
%            }
%            break;
%          }
%        case 49: // GROUP_LIST:
%          size +=
%              SchemaUtil.computeSizeGroupList(
%                  number,
%                  (List<MessageLite>) unsafe.getObject(message, offset),
%                  getMessageFieldSchema(i));
%          break;
%        case 50: // MAP:
%          // TODO(dweis): Use schema cache.
%          size +=
%              mapFieldSchema.getSerializedSize(
%                  number, unsafe.getObject(message, offset), getMapFieldDefaultEntry(i));
%          break;
%        case 51: // ONEOF_DOUBLE:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeDoubleSize(number, 0);
%          }
%          break;
%        case 52: // ONEOF_FLOAT:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeFloatSize(number, 0);
%          }
%          break;
%        case 53: // ONEOF_INT64:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeInt64Size(number, oneofLongAt(message, offset));
%          }
%          break;
%        case 54: // ONEOF_UINT64:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeUInt64Size(number, oneofLongAt(message, offset));
%          }
%          break;
%        case 55: // ONEOF_INT32:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeInt32Size(number, oneofIntAt(message, offset));
%          }
%          break;
%        case 56: // ONEOF_FIXED64:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeFixed64Size(number, 0);
%          }
%          break;
%        case 57: // ONEOF_FIXED32:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeFixed32Size(number, 0);
%          }
%          break;
%        case 58: // ONEOF_BOOL:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeBoolSize(number, true);
%          }
%          break;
%        case 59: // ONEOF_STRING:
%          if (isOneofPresent(message, number, i)) {
%            Object value = unsafe.getObject(message, offset);
%            if (value instanceof ByteString) {
%              size += CodedOutputStream.computeBytesSize(number, (ByteString) value);
%            } else {
%              size += CodedOutputStream.computeStringSize(number, (String) value);
%            }
%          }
%          break;
%        case 60: // ONEOF_MESSAGE:
%          if (isOneofPresent(message, number, i)) {
%            Object value = unsafe.getObject(message, offset);
%            size += SchemaUtil.computeSizeMessage(number, value, getMessageFieldSchema(i));
%          }
%          break;
%        case 61: // ONEOF_BYTES:
%          if (isOneofPresent(message, number, i)) {
%            size +=
%                CodedOutputStream.computeBytesSize(
%                    number, (ByteString) unsafe.getObject(message, offset));
%          }
%          break;
%        case 62: // ONEOF_UINT32:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeUInt32Size(number, oneofIntAt(message, offset));
%          }
%          break;
%        case 63: // ONEOF_ENUM:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeEnumSize(number, oneofIntAt(message, offset));
%          }
%          break;
%        case 64: // ONEOF_SFIXED32:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeSFixed32Size(number, 0);
%          }
%          break;
%        case 65: // ONEOF_SFIXED64:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeSFixed64Size(number, 0);
%          }
%          break;
%        case 66: // ONEOF_SINT32:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeSInt32Size(number, oneofIntAt(message, offset));
%          }
%          break;
%        case 67: // ONEOF_SINT64:
%          if (isOneofPresent(message, number, i)) {
%            size += CodedOutputStream.computeSInt64Size(number, oneofLongAt(message, offset));
%          }
%          break;
%        case 68: // ONEOF_GROUP:
%          if (isOneofPresent(message, number, i)) {
%            size +=
%                CodedOutputStream.computeGroupSize(
%                    number,
%                    (MessageLite) unsafe.getObject(message, offset),
%                    getMessageFieldSchema(i));
%          }
%   
